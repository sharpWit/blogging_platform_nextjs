name: GitHub Actions Vercel Preview Deployment

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  VERCEL_URL: ${{ secrets.VERCEL_URL  }}
  NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET  }}
  NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL  }}
  POSTGRES_DATABASE: ${{ secrets.POSTGRES_DATABASE  }}
  POSTGRES_HOST: ${{ secrets.POSTGRES_HOST  }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD  }}
  POSTGRES_PRISMA_URL: ${{ secrets.POSTGRES_PRISMA_URL  }}
  POSTGRES_URL_NON_POOLING: ${{ secrets.POSTGRES_URL_NON_POOLING  }}
  POSTGRES_URL_NO_SSL: ${{ secrets.POSTGRES_URL_NO_SSL  }}
  POSTGRES_USER: ${{ secrets.POSTGRES_USER  }}

on:
  push:
    branches-ignore:
      - main

jobs:
  Deploy-Preview:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - uses: actions/checkout@v4

      # Step 2: Set up Node.js environment
      - uses: actions/setup-node@v4
        with:
          node-version: 20 # Specify your Node.js version

      # Step 3: Install dependencies
      - name: Install Dependencies
        run: npm install

      # Step 4: Run Tests
      - name: Run Tests
        run: npm run test:ci

      # Step 5: Install Vercel CLI
      - name: Install Vercel CLI
        run: npm install --global vercel@canary

      # Step 6: Pull Vercel Environment
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      # Step 7: Build Project
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      # Step 8: Deploy to Vercel
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
# //////////////////////
